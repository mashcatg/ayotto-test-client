import { useState, useEffect } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import { MdArrowRightAlt } from "react-icons/md";
import useAxios from "../../hooks/useAxios"; // Make sure the path is correct

// Import your Loading component or create a simple one
const Loading = () => (
  <div className="flex justify-center items-center">
    <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
  </div>
);

const QuizSubmission = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const axios = useAxios();
  const [loading, setLoading] = useState(true);
  const [quizData, setQuizData] = useState([]);
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [answers, setAnswers] = useState({});
  const [timeLeft, setTimeLeft] = useState(300); // 5 minutes timer
  const [showResults, setShowResults] = useState(false);
  const [quizScore, setQuizScore] = useState(0);
  const [error, setError] = useState(null);

  // Initialize quiz
  useEffect(() => {
    // Redirect if no parameters provided
    if (!location.state?.subject) {
      navigate('/dashboard/mock-test');
      return;
    }

    // Log all the received parameters for debugging
    console.log("Quiz Parameters:", {
      batch: location.state.batch,
      group: location.state.group,
      subject: location.state.subject,
      subjectId: location.state.subjectId,
      chapter: location.state.chapter,
      chapterId: location.state.chapterId,
      topics: location.state.topics,
      topicIds: location.state.topicIds
    });

    // Fetch questions based on parameters
    const fetchQuestions = async () => {
      setLoading(true);
      setError(null);
      
      try {
        // Prepare request body for the quiz endpoint
        const requestBody = {
          topicId: location.state.topicIds || [],
          totalQuestions: 5, // Hardcoded value as specified
          challengedTo: []
        };
        
        console.log("Sending request with body:", requestBody);
        
        // Fetch questions
        const response = await axios.post("/quiz", requestBody);
        console.log("Fetched questions response:", response);
        
        if (response?.data?.questions && response.data.questions.length > 0) {
          // Format the questions from API response based on actual backend structure
          const formattedQuestions = response.data.questions.map((q) => {
            // Find the index of the correct option
            const correctOptionIndex = q.questionOption.findIndex(option => option.isCorrect === true);
            
            return {
              id: q._id,
              question: q.questionText,
              reference: q.questionRef || "",
              solution: q.solution || "",
              options: q.questionOption.map(option => option.text),
              correctAnswer: correctOptionIndex !== -1 ? correctOptionIndex : 0,
              // Store the full option objects for result display
              fullOptions: q.questionOption
            };
          });
          
          setQuizData(formattedQuestions);
          setLoading(false);
          console.log("Formatted questions for quiz:", formattedQuestions);
        } else {
          throw new Error("No questions returned from API");
        }
      } catch (error) {
        console.error("Error fetching questions:", error);
        setError("Failed to load questions. Please try again.");
        setLoading(false);
      }
    };

    fetchQuestions();
  }, [location.state, navigate, axios]);

  // Timer countdown
  useEffect(() => {
    if (loading || showResults) return;

    const timer = setInterval(() => {
      setTimeLeft(prev => {
        if (prev <= 1) {
          clearInterval(timer);
          handleSubmitQuiz();
          return 0;
        }
        return prev - 1;
      });
    }, 1000);

    return () => clearInterval(timer);
  }, [loading, showResults]);

  // Prevent page navigation/refresh
  useEffect(() => {
    const handleBeforeUnload = (e) => {
      if (!showResults) {
        e.preventDefault();
        e.returnValue = '';
        return '';
      }
    };

    window.addEventListener('beforeunload', handleBeforeUnload);
    return () => window.removeEventListener('beforeunload', handleBeforeUnload);
  }, [showResults]);

  // Handle visibility change (tab switching)
  useEffect(() => {
    const handleVisibilityChange = () => {
      if (document.hidden && !showResults) {
        alert("Warning: Switching tabs during the exam is not allowed!");
      }
    };

    document.addEventListener('visibilitychange', handleVisibilityChange);
    return () => document.removeEventListener('visibilitychange', handleVisibilityChange);
  }, [showResults]);

  // Handle answer selection
  const handleAnswerSelect = (questionId, selectedOption) => {
    if (showResults || timeLeft === 0) return;

    setAnswers(prev => ({
      ...prev,
      [questionId]: selectedOption
    }));
  };

  // Calculate score
  const calculateScore = () => {
    let score = 0;
    quizData.forEach(question => {
      if (answers[question.id] === question.correctAnswer) {
        score++;
      }
    });
    return score;
  };

  // Submit quiz
  const handleSubmitQuiz = () => {
    const finalScore = calculateScore();
    setQuizScore(finalScore);
    setShowResults(true);
    
    // Save the quiz results to backend
    const saveQuizResults = async () => {
      try {
        const quizResults = {
          topicId: location.state.topicIds,
          chapterId: location.state.chapterId,
          subjectId: location.state.subjectId,
          answers: answers,
          score: finalScore,
          totalQuestions: quizData.length,
          timeTaken: 300 - timeLeft // Calculate time taken in seconds
        };
        
        console.log("Saving quiz results:", quizResults);
        await axios.post('/quiz-result', quizResults);
      } catch (error) {
        console.error("Error saving quiz results:", error);
      }
    };
    
    saveQuizResults();
  };

  // Format time
  const formatTime = (seconds) => {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
  };

  // Navigation functions
  const goToNextQuestion = () => {
    if (currentQuestion < quizData.length - 1) {
      setCurrentQuestion(prev => prev + 1);
    }
  };

  const goToPreviousQuestion = () => {
    if (currentQuestion > 0) {
      setCurrentQuestion(prev => prev - 1);
    }
  };

  // Check if current question is answered
  const isCurrentQuestionAnswered = () => {
    return answers[quizData[currentQuestion]?.id] !== undefined;
  };

  // Error state
  if (error) {
    return (
      <div className="max-w-2xl mx-auto mt-8 p-6 border border-red-400 rounded-lg shadow-lg bg-white">
        <h2 className="text-2xl font-bold mb-4 text-red-600">Error Loading Quiz</h2>
        <p>{error}</p>
        <div className="mt-6 text-center">
          <button
            onClick={() => navigate('/dashboard/mock-test')}
            className="bg-primary text-white px-6 py-2 rounded hover:bg-primary/90 transition-colors"
          >
            Return to Mock Test
          </button>
        </div>
      </div>
    );
  }

  // Loading state
  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <Loading />
      </div>
    );
  }

  // No questions found state
  if (!loading && quizData.length === 0) {
    return (
      <div className="max-w-2xl mx-auto mt-8 p-6 border border-yellow-400 rounded-lg shadow-lg bg-white">
        <h2 className="text-2xl font-bold mb-4">No Questions Available</h2>
        <p>There are no questions available for these topics at the moment.</p>
        <div className="mt-6 text-center">
          <button
            onClick={() => navigate('/dashboard/mock-test')}
            className="bg-primary text-white px-6 py-2 rounded hover:bg-primary/90 transition-colors"
          >
            Return to Mock Test
          </button>
        </div>
      </div>
    );
  }

  // Results page
  if (showResults) {
    return (
      <div className="max-w-2xl mx-auto mt-8 p-6 border border-green-400 rounded-lg shadow-lg bg-white">
        <h2 className="text-2xl font-bold mb-4">Quiz Results</h2>
        <div className="space-y-4">
          <div className="mb-4 p-4 bg-green-50 border-green-400 border rounded-lg">
            <h3 className="font-semibold mb-2">Quiz Parameters</h3>
            <p>Batch: {location.state.batch}</p>
            <p>Group: {location.state.group}</p>
            <p>Subject: {location.state.subject}</p>
            <p>Chapter: {location.state.chapter}</p>
            <p>Topics: {location.state.topics && location.state.topics.length > 0 
                ? location.state.topics.join(", ") 
                : "No topics specified"}
            </p>
          </div>
          
          <div className="p-4 rounded-lg border border-green-400 bg-green-50">
            <p className="text-lg font-semibold">
              Final Score: {quizScore} / {quizData.length}
            </p>
            <p className="text-sm text-gray-600 mt-2">
              Time Taken: {formatTime(300 - timeLeft)}
            </p>
          </div>
          
          <div className="mt-6 space-y-6">
            <h3 className="text-lg font-semibold">Question Review</h3>
            {quizData.map((question, index) => (
              <div key={index} className={`p-4 border rounded-lg ${answers[question.id] === question.correctAnswer ? 'border-green-400 bg-green-50' : 'border-red-400 bg-red-50'}`}>
                <p className="font-medium">{index + 1}. {question.question}</p>
                {question.reference && <p className="text-xs text-gray-500 mt-1">{question.reference}</p>}
                
                <div className="mt-3 grid grid-cols-1 gap-2">
                  {question.options.map((option, optIdx) => (
                    <div 
                      key={optIdx} 
                      className={`p-2 rounded ${
                        optIdx === question.correctAnswer 
                          ? 'bg-green-200 border border-green-400' 
                          : answers[question.id] === optIdx && optIdx !== question.correctAnswer 
                            ? 'bg-red-200 border border-red-400' 
                            : 'bg-gray-100 border border-gray-200'
                      }`}
                    >
                      <span className={optIdx === question.correctAnswer ? 'font-medium' : ''}>
                        {option}
                      </span>
                      {optIdx === question.correctAnswer && 
                        <span className="ml-2 text-green-600 text-sm">✓ Correct</span>
                      }
                    </div>
                  ))}
                </div>
                
                {question.solution && (
                  <div className="mt-4 p-3 bg-blue-50 border border-blue-200 rounded">
                    <p className="text-sm font-medium mb-1">Solution:</p>
                    <p className="text-sm whitespace-pre-line">{question.solution}</p>
                  </div>
                )}
              </div>
            ))}
          </div>
          
          <div className='text-center mt-8'>
            <button
              onClick={() => navigate('/dashboard/mock-test')}
              className="bg-green-600 text-white px-6 py-2 rounded hover:bg-green-600/90 transition-colors"
            >
              Return to Mock Test
            </button>
          </div>
        </div>
      </div>
    );
  }

  // Quiz taking page
  return (
    <div className="max-w-7xl mx-auto p-4">
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-xl font-bold text-gray-800/90">Quiz in Progress</h2>
        <div className="text-sm text-gray-600">
          Time Remaining: <span className='text-primary'>{formatTime(timeLeft)}</span>
        </div>
      </div>

      <div className="border border-gray-100 rounded-lg bg-white p-6">
        <div className="mb-4 p-3 bg-gray-50 rounded">
          <p className="text-sm text-gray-600">
            Subject: {location.state.subject} | Chapter: {location.state.chapter}
          </p>
          <p className="text-sm text-gray-600 mt-1">
            Topics: {location.state.topics && location.state.topics.length > 0 
              ? (location.state.topics.length <= 3 
                ? location.state.topics.join(", ") 
                : `${location.state.topics.slice(0, 2).join(", ")} +${location.state.topics.length - 2} more`)
              : "No topics specified"}
          </p>
        </div>

        <div className="mb-6">
          <div className="flex justify-between items-center mb-4">
            <span className="text-sm text-gray-500">
              Question {currentQuestion + 1} of {quizData.length}
            </span>
            <span className="text-sm text-gray-500">
              {Object.keys(answers).length} of {quizData.length} answered
            </span>
          </div>

          <div className="mb-6">
            <p className="text-lg mb-1">{currentQuestion + 1}. {quizData[currentQuestion]?.question}</p>
            {quizData[currentQuestion]?.reference && (
              <p className="text-xs text-gray-500 mb-4">{quizData[currentQuestion]?.reference}</p>
            )}
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-5">
            {quizData[currentQuestion]?.options.map((option, index) => (
              <div
                key={index}
                className={`flex items-center p-3 border rounded cursor-pointer transition-colors
                  ${answers[quizData[currentQuestion]?.id] === index ? 'bg-[#F0FDF4] border-[#83f8a6]' : 'hover:bg-gray-50 bg-slate-50 border-gray-100'}`}
                onClick={() => handleAnswerSelect(quizData[currentQuestion]?.id, index)}
              >
                <input
                  type="radio"
                  id={`option-${index}`}
                  name={`question-${quizData[currentQuestion]?.id}`}
                  checked={answers[quizData[currentQuestion]?.id] === index}
                  onChange={() => { }}
                  className="mr-3 hidden"
                  disabled={timeLeft === 0}
                />
                <label htmlFor={`option-${index}`} className="cursor-pointer flex-1">
                  {option}
                </label>
              </div>
            ))}
          </div>
        </div>

        <div className="flex justify-between mt-6 pt-4">
          <button
            onClick={goToPreviousQuestion}
            disabled={currentQuestion === 0 || timeLeft === 0}
            className="bg-gray-200 px-4 py-2 rounded disabled:opacity-50 hover:bg-gray-300 transition-colors flex items-center gap-2"
          >
            <MdArrowRightAlt className='text-2xl rotate-180' />
            <span>Previous</span>
          </button>

          {currentQuestion === quizData.length - 1 ? (
            <button
              onClick={handleSubmitQuiz}
              disabled={timeLeft === 0}
              className="bg-primary text-white px-6 py-2 rounded hover:bg-primary/90 transition-colors disabled:opacity-50"
            >
              Submit Quiz
            </button>
          ) : (
            <button
              onClick={goToNextQuestion}
              disabled={!isCurrentQuestionAnswered() || timeLeft === 0}
              className="bg-primary text-white px-4 py-2 rounded hover:bg-primary/90 transition-colors disabled:opacity-50 flex items-center gap-2"
            >
              <span>Next</span>
              <MdArrowRightAlt className='text-2xl' />
            </button>
          )}
        </div>
      </div>
    </div>
  );
};

export default QuizSubmission;